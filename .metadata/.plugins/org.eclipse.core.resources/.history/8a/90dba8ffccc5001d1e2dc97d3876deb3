/*
 * NVIC.h
 *
 *  Created on: Mar 1, 2023
 *      Author: samir
 */


#ifndef NVIC_H_
#define NVIC_H_

#include "Std_types.h"
#include "Bit_math.h"
/*====================================================================================================*/
/******************************************* Macros ***************************************************/
/*====================================================================================================*/
#define NVIC_PRIO_BITS          4U       /*  uses 4 Bits for the Priority Levels */


/**  CORTEX_Preemption_Priority_Group CORTEX Preemption Priority Group   **/
#define NVIC_PRIORITYGROUP_0         ((u32)0x00000007U)        /* 0 bits for pre-emption priority
                                                                       4 bits for subpriority */

#define NVIC_PRIORITYGROUP_1         ((u32)0x00000006U)        /* 1 bits for pre-emption priority
                                                                       3 bits for subpriority */

#define NVIC_PRIORITYGROUP_2         ((u32)0x00000005U)        /* 2 bits for pre-emption priority
                                                                       2 bits for subpriority */

#define NVIC_PRIORITYGROUP_3         ((u32)0x00000004U)        /* 3 bits for pre-emption priority
                                                                       1 bits for subpriority */

#define NVIC_PRIORITYGROUP_4         ((u32)0x00000003U)        /* 4 bits for pre-emption priority
                                                                       0 bits for subpriority */

/********************************************** END ****************************************************/
/*====================================================================================================*/

/*====================================================================================================*/
/******************************************* Types ****************************************************/
/*====================================================================================================*/

/*************************** ErrorStatus ***************************/
typedef enum 
{
    NVIC_OK,
    NVIC_NOTOK,
    NVIC_TimeOut,
    NVIC_parameter_error,
    NVIC_NullPointer
}NVIC_enuErrorStatus_t;


/**************************** Exceptions & Interrupt Numbers ***************************/
typedef enum
{
/******  Cortex-M4 Processor Exceptions Numbers ****************************************************************/
  NonMaskableInt_IRQn         = -14,    /* 2 Non Maskable Interrupt                                          */
  MemoryManagement_IRQn       = -12,    /* 4 Cortex-M4 Memory Management Interrupt                           */
  BusFault_IRQn               = -11,    /* 5 Cortex-M4 Bus Fault Interrupt                                   */
  UsageFault_IRQn             = -10,    /* 6 Cortex-M4 Usage Fault Interrupt                                 */
  SVCall_IRQn                 = -5,     /* 11 Cortex-M4 SV Call Interrupt                                    */
  DebugMonitor_IRQn           = -4,     /* 12 Cortex-M4 Debug Monitor Interrupt                              */
  PendSV_IRQn                 = -2,     /* 14 Cortex-M4 Pend SV Interrupt                                    */
  SysTick_IRQn                = -1,     /* 15 Cortex-M4 System Tick Interrupt                                */
/******  STM32 specific Interrupt Numbers ********************************************************************/
  WWDG_IRQn                   = 0,      /* Window WatchDog Interrupt                                         */
  PVD_IRQn                    = 1,      /* PVD through EXTI Line detection Interrupt                         */
  TAMP_STAMP_IRQn             = 2,      /* Tamper and TimeStamp interrupts through the EXTI line             */
  RTC_WKUP_IRQn               = 3,      /* RTC Wakeup interrupt through the EXTI line                        */
  FLASH_IRQn                  = 4,      /* FLASH global Interrupt                                            */
  RCC_IRQn                    = 5,      /* RCC global Interrupt                                              */
  EXTI0_IRQn                  = 6,      /* EXTI Line0 Interrupt                                              */
  EXTI1_IRQn                  = 7,      /* EXTI Line1 Interrupt                                              */
  EXTI2_IRQn                  = 8,      /* EXTI Line2 Interrupt                                              */
  EXTI3_IRQn                  = 9,      /* EXTI Line3 Interrupt                                              */
  EXTI4_IRQn                  = 10,     /* EXTI Line4 Interrupt                                              */
  DMA1_Stream0_IRQn           = 11,     /* DMA1 Stream 0 global Interrupt                                    */
  DMA1_Stream1_IRQn           = 12,     /* DMA1 Stream 1 global Interrupt                                    */
  DMA1_Stream2_IRQn           = 13,     /* DMA1 Stream 2 global Interrupt                                    */
  DMA1_Stream3_IRQn           = 14,     /* DMA1 Stream 3 global Interrupt                                    */
  DMA1_Stream4_IRQn           = 15,     /* DMA1 Stream 4 global Interrupt                                    */
  DMA1_Stream5_IRQn           = 16,     /* DMA1 Stream 5 global Interrupt                                    */
  DMA1_Stream6_IRQn           = 17,     /* DMA1 Stream 6 global Interrupt                                    */
  ADC_IRQn                    = 18,     /* ADC1, ADC2 and ADC3 global Interrupts                             */
  EXTI9_5_IRQn                = 23,     /* External Line[9:5] Interrupts                                     */
  TIM1_BRK_TIM9_IRQn          = 24,     /* TIM1 Break interrupt and TIM9 global interrupt                    */
  TIM1_UP_TIM10_IRQn          = 25,     /* TIM1 Update Interrupt and TIM10 global interrupt                  */
  TIM1_TRG_COM_TIM11_IRQn     = 26,     /* TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
  TIM1_CC_IRQn                = 27,     /* TIM1 Capture Compare Interrupt                                    */
  TIM2_IRQn                   = 28,     /* TIM2 global Interrupt                                             */
  TIM3_IRQn                   = 29,     /* TIM3 global Interrupt                                             */
  TIM4_IRQn                   = 30,     /* TIM4 global Interrupt                                             */
  I2C1_EV_IRQn                = 31,     /* I2C1 Event Interrupt                                              */
  I2C1_ER_IRQn                = 32,     /* I2C1 Error Interrupt                                              */
  I2C2_EV_IRQn                = 33,     /* I2C2 Event Interrupt                                              */
  I2C2_ER_IRQn                = 34,     /* I2C2 Error Interrupt                                              */  
  SPI1_IRQn                   = 35,     /* SPI1 global Interrupt                                             */
  SPI2_IRQn                   = 36,     /* SPI2 global Interrupt                                             */
  USART1_IRQn                 = 37,     /* USART1 global Interrupt                                           */
  USART2_IRQn                 = 38,     /* USART2 global Interrupt                                           */
  EXTI15_10_IRQn              = 40,     /* External Line[15:10] Interrupts                                   */
  RTC_Alarm_IRQn              = 41,     /* RTC Alarm (A and B) through EXTI Line Interrupt                   */
  OTG_FS_WKUP_IRQn            = 42,     /* USB OTG FS Wakeup through EXTI line interrupt                     */  
  DMA1_Stream7_IRQn           = 47,     /* DMA1 Stream7 Interrupt                                            */
  SDIO_IRQn                   = 49,     /* SDIO global Interrupt                                             */
  TIM5_IRQn                   = 50,     /* TIM5 global Interrupt                                             */
  SPI3_IRQn                   = 51,     /* SPI3 global Interrupt                                             */
  DMA2_Stream0_IRQn           = 56,     /* DMA2 Stream 0 global Interrupt                                    */
  DMA2_Stream1_IRQn           = 57,     /* DMA2 Stream 1 global Interrupt                                    */
  DMA2_Stream2_IRQn           = 58,     /* DMA2 Stream 2 global Interrupt                                    */
  DMA2_Stream3_IRQn           = 59,     /* DMA2 Stream 3 global Interrupt                                    */
  DMA2_Stream4_IRQn           = 60,     /* DMA2 Stream 4 global Interrupt                                    */
  OTG_FS_IRQn                 = 67,     /* USB OTG FS global Interrupt                                       */
  DMA2_Stream5_IRQn           = 68,     /* DMA2 Stream 5 global interrupt                                    */
  DMA2_Stream6_IRQn           = 69,     /* DMA2 Stream 6 global interrupt                                    */
  DMA2_Stream7_IRQn           = 70,     /* DMA2 Stream 7 global interrupt                                    */
  USART6_IRQn                 = 71,     /* USART6 global interrupt                                           */
  I2C3_EV_IRQn                = 72,     /* I2C3 event interrupt                                              */
  I2C3_ER_IRQn                = 73,     /* I2C3 error interrupt                                              */
  FPU_IRQn                    = 81,     /* FPU global interrupt                                              */
  SPI4_IRQn                   = 84      /* SPI4 global Interrupt                                             */

} IRQn_t;


/***************************************************END************************************************/
/*====================================================================================================*/


/*===================================================================================================*/
/************************************************ APIs ***********************************************/
/*===================================================================================================*/ 


/****************************************************************************************/
/*                       NVIC_EnableIRQ  function                                       */
/****************************************************************************************/
/*  Description: used to  Enable External Interrupt                                     */
/* 	input:       IRQn  External interrupt number. Value cannot be negative.             */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_EnableIRQ(IRQn_t interruptnum );


/****************************************************************************************/
/*                       NVIC_DisableIRQ  function                                      */
/****************************************************************************************/
/*  Description: used to  Disable External Interrupt                                    */
/* 	input:       IRQn  External interrupt number. Value cannot be negative.             */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_DisableIRQ(IRQn_t interruptnum );



/****************************************************************************************/
/*                       NVIC_SetPendingIRQ  function                                   */
/****************************************************************************************/
/*  Description: used to  Sets the pending bit of an external interrupt.                */
/* 	input:       IRQn  External interrupt number. Value cannot be negative.             */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_SetPendingIRQ(IRQn_t interruptnum );


/****************************************************************************************/
/*                       NVIC_ClearPendingIRQ  function                                 */
/****************************************************************************************/
/*  Description: used to  Clear the pending bit of an external interrupt.               */
/* 	input:       IRQn  External interrupt number. Value cannot be negative.             */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_ClearPendingIRQ(IRQn_t interruptnum );



/****************************************************************************************/
/*                       NVIC_GetPendingIRQ  function                                   */
/****************************************************************************************/
/*  Description: used to  Get  the pending bit of an external interrupt.                */
/* 	input:       IRQn  External interrupt number. Value cannot be negative.             */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_GetPendingIRQ(IRQn_t interruptnum, u32* pendingResult );

/****************************************************************************************/
/*                       NVIC_GetActive  function                                       */
/****************************************************************************************/
/*  Description: used to  Get the Active bit of an external interrupt.                  */
/* 	input:       IRQn  External interrupt number. Value cannot be negative.             */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_GetActive(IRQn_t interruptnum, u32* activeResult );


/****************************************************************************************/
/*                       NVIC_GetCurrExecExcep  function                                */
/****************************************************************************************/
/*  Description: used to  Get currently executing exception.                            */
/* 	input:       currentExcep                                                           */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_GetCurrExecExcep(u32* currentExcep );

/****************************************************************************************/
/*                       NVIC_SetPriority  function                                     */
/****************************************************************************************/
/*  Description: used to  Sets the priority of an interrupt.                            */
/* 	input:       IRQn  External interrupt number, priority  Priority to set             */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_SetPriority(IRQn_t interruptnum ,u32 priority);

/****************************************************************************************/
/*                       NVIC_getPriority  function                                     */
/****************************************************************************************/
/*  Description: used to  gets the priority of an interrupt.                            */
/* 	input:       IRQn  External interrupt number, priority  Priority to set             */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_getPriority(IRQn_t interruptnum ,u32* priority);

/****************************************************************************************/
/*                       NVIC_GetPriority  function                                     */
/****************************************************************************************/
/*  Description: Reads the priority of an interrupt.                                    */
/*               The interrupt number can be positive to specify                        */
/*               an external (device specific) interrupt,                               */
/*               or negative to specify an internal (core) interrupt.                   */
/* 	input:       IRQn  External interrupt number, priority  Priority to read            */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_GetPriority(IRQn_t interruptnum ,u32* priority);



/****************************************************************************************/
/*                       NVIC_SetPriorityGrouping  function                             */
/****************************************************************************************/
/*  Description: ets the priority grouping field using the required unlock sequence.    */
/*                 The parameter PriorityGroup is assigned to                           */    
/*                 the field SCB->AIRCR [10:8] PRIGROUP field.                          */  
/*                 Only values from 0..7 are used.                                      */
/*                 In case of a conflict between priority grouping and available        */
/*                 priority bits (__NVIC_PRIO_BITS),                                    */
/*                 the smallest possible priority group is set.                         */
/* 	input:       PriorityGroup                                                          */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_SetPriorityGrouping(u32 PriorityGroup);




/****************************************************************************************/
/*                       NVIC_GetPriorityGrouping  function                             */
/****************************************************************************************/
/*  Description: Reads the priority grouping field from the NVIC Interrupt Controller.  */
/* 	input:       PriorityGroup                                                          */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_GetPriorityGrouping(u32* PriorityGroup);

/****************************************************************************************/
/*                       NVIC_setPriority  function                                     */
/****************************************************************************************/
/*  Description: Sets the priority of an interrupt.                                     */
/* 	input:       Priority,IRQn_Type                                                     */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority);

/****************************************************************************************/
/*                       NVIC_genSoftWareInterrupt  function                            */
/****************************************************************************************/
/*  Description: used to generate software interrupt using NVIC->STIR.                  */
/* 	input:       IRQn_t                                                                */
/* 	return:      NVIC_enuErrorStatus_t                                                  */
/****************************************************************************************/
NVIC_enuErrorStatus_t NVIC_genSoftWareInterrupt(IRQn_t interruptnum);


/****************************************************************************************/
/*                       NVIC_SystemReset  function                                     */
/****************************************************************************************/
/*  Description: Initiates a system reset request to reset the MCU.                     */
/* 	input:       void                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void NVIC_SystemReset(void);


/****************************************************************************************/
/*                       NVIC_setPRIMASK  function                                      */
/****************************************************************************************/
/*  Description: Assigns the given value to the Priority Mask Register..                */
/* 	input:       u32                                                                    */
/* 	return:      void                                                                   */
/****************************************************************************************/
 void NVIC_setPRIMASK(u32 priMask);

/****************************************************************************************/
/*                       NVIC_getPRIMASK  function                                      */
/****************************************************************************************/
/*  Description: Read  the priority mask bit from the Priority Mask Register.           */
/* 	input:       u32*                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void  NVIC_getPRIMASK(u32* priMask);

/****************************************************************************************/
/*                       NVIC_enableFaultIRQ  function                                  */
/****************************************************************************************/
/*  Description: Enables FIQ interrupts by clearing the F-bit in the CPSR.              */
/* 	input:       void                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void NVIC_enableFaultIRQ(void);

/****************************************************************************************/
/*                       NVIC_disableFaultIRQ  function                                 */
/****************************************************************************************/
/*  Description: Disables FIQ interrupts by setting the F-bit in the CPSR.              */
/* 	input:       void                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void NVIC_disableFaultIRQ(void);


/****************************************************************************************/
/*                       NVIC_setBASEPRI  function                                      */
/****************************************************************************************/
/*  Description: Assigns the given value to the Base Priority register.                 */
/* 	input:       u32                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void NVIC_setBASEPRI(u32 basePri);

/****************************************************************************************/
/*                       NVIC_getBASEPRI  function                                      */
/****************************************************************************************/
/*  Description: get value from the Base Priority register.                             */
/* 	input:       u32*                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void NVIC_getBASEPRI(u32* basePri );

/****************************************************************************************/
/*                       NVIC_reallocateVT  function                                    */
/****************************************************************************************/
/*  Description: reallocate vector taple .                                              */
/* 	input:       u32*                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void NVIC_reallocateVT(u32 baseAddress);

/****************************************************************************************/
/*                       NVIC_NumberOfImplementedBits  function                         */
/****************************************************************************************/
/*  Description: return number of implemented bits in mcu .                             */
/* 	input:       void                                                                   */
/* 	return:      u32                                                                   */
/****************************************************************************************/
u32 NVIC_NumberOfImplementedBits();

/****************************************************************************************/
/*                       NVIC_enableIRQ  function                                      */
/****************************************************************************************/
/*  Description: Enables IRQ interrupts by clearing the I-bit in the CPSR.              */
/* 	input:       void                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void NVIC_enableIRQ(void);


/****************************************************************************************/
/*                       NVIC_disableIRQ  function                                      */
/****************************************************************************************/
/*  Description:  Disables IRQ interrupts by setting the I-bit in the CPSR.             */
/* 	input:       void                                                                   */
/* 	return:      void                                                                   */
/****************************************************************************************/
void NVIC_disableIRQ(void);
/***************************************************END************************************************/
/*====================================================================================================*/

#endif