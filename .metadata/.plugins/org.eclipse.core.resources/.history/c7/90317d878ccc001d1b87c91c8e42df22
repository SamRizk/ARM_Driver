/*
 * SWITCH.c
 *
 *  Created on: Feb 23, 2023
 *      Author: samir
 */


/*******************************************Includes*******************************************************/
#include "SWITCH.h"
/*******************************************************************************************************/
/******************************************* Macros ****************************************************/
/******************************************************************************************************/
#define SWC_TRILERS    5



/**********************************************************************************************************/
/***************************************************END****************************************************/
/**********************************************************************************************************/


/******************************************************************************************************/
/******************************************* Types ****************************************************/
/******************************************************************************************************/


/**********************************************************************************************************/
/***************************************************END****************************************************/
/**********************************************************************************************************/

/********************************************** Static Function Prototypes ********************************/
//static void Delay_ms(volatile int time_ms);

/********************************************** End Static Function ***************************************/

/************************************************ APIs ***************************************************/
/*                                                                                                       */



SWITCH_ErrorStatus_t SWC_init(void)
{
	SWITCH_ErrorStatus_t LOC_state = SWC_OK;
    GPIO_CFG_t LOC_gpiocfg;
    u32 LOC_loopCounter = 0;
    for (;LOC_loopCounter < SWCS_COUNT; LOC_loopCounter++)
    {
        LOC_gpiocfg.GPIO_Port = SWC_cfg[LOC_loopCounter].port;
        LOC_gpiocfg.GPIO_Pin  = SWC_cfg[LOC_loopCounter].pin;
        LOC_gpiocfg.GPIO_Mode = SWC_cfg[LOC_loopCounter].mode;
        LOC_state = GPIO_init(&LOC_gpiocfg);
        

    }
    return LOC_state;
}


SWITCH_ErrorStatus_t SWC_getState(SWITCH_names_t SWC,u32* state)
{
	SWITCH_ErrorStatus_t LOC_state = SWC_OK;


    return LOC_state;
}








/********************************************** Static Function imp **************************************/

//static void Delay_ms(volatile int time_ms)
//{
//	    int j;
//        for(j = 0; j < time_ms*4000; j++)
//            {}  /* excute NOP for 1ms */
//}

/********************************************** End Static Function ***************************************/


/*

SWITCH_ErrorStatus_t LOC_state = SWC_OK;
u32 LOC_GetPressed = SWC_STATUS_NOTPREESED;
// u8 LOC_LoopCounter = 0;
if(state != NULL)
{

        GPIO_readPhysVal(SWC_cfg[SWC].port, SWC_cfg[SWC].pin,state);
        if((*state ^ SWC_cfg[SWC].pull) == SWC_STATUS_PREESED )
        {
            LOC_GetPressed = SWC_STATUS_PREESED;
        }
        else
        {
            LOC_GetPressed = SWC_STATUS_NOTPREESED;
        }


    *state = LOC_GetPressed;

}
else
{
    LOC_state = SWC_NULLPOINTER;
}*/
